# Default values for ppap.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 3

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  fe:
    repository: kchabin/ppap-fe
    pullPolicy: Always
    tag: latest
  be:
    repository: kchabin/ppap-be
    pullPolicy: Always
    tag: latest
  llm:
    repository: kchabin/ppap-llm
    pullPolicy: Always
    tag: v.01
  mysql:
    repository: mysql
    tag: latest

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  fe:
    type: ClusterIP
    port: 80
    targetPort: 80
  be:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  llm:
    type: ClusterIP
    port: 80
    targetPort: 8000
  mysql:
    type: ClusterIP
    port: 3306

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: ppap-chart.local
      paths:
        - path: /
          pathType: Prefix
          backend:
            serviceName: ppap-fe-service
            servicePort: 80
        - path: /api/hello
          pathType: Prefix
          backend:
            serviceName: ppap-be-service
            servicePort: 80
        - path: /api/users/signup
          pathType: Prefix
          backend:
            serviceName: ppap-be
            servicePort: 80
        - path: /api/users/login
          pathType: Prefix
          backend:
            serviceName: ppap-be-service
            servicePort: 80
        - path: /chat/ask
          pathType: Prefix
          backend:
            serviceName: ppap-llm
            servicePort: 80
        - path: /chat/upload-policy
          pathType: Prefix
          backend:
            serviceName: ppap-llm-service
            servicePort: 80
        - path: /chat/upload-guideline
          pathType: Prefix
          backend:
            serviceName: ppap-llm-service
            servicePort: 80

resources: {}

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

database:
  url: "jdbc:mysql://mysql-service:3306/mydb"
  username: "test"
  driver: "com.mysql.cj.jdbc.Driver"

mysql:
  rootPassword: 1234
  dbName: mydb
  user: test
  password: 1234
  port: 3306
  persistence:
    enabled: true
    storageClass: "" # storageClassName을 명시적으로 설정하지 않음 (디폴트 사용)
    accessMode: ReadWriteOnce
    size: 5Gi
    volumeName: mysql-pv
    hostPath: "/mnt/data"

secret:
  name: jwt-secret
  data:
    JWT_ACCESS_SECRET: "ceAUFyQfEIi7B2rfRjwQFuDolYAtVnBvsgsdSDSDGkNKLjIJssab"
    JWT_REFRESH_SECRET: "mwd967BeVKFR7ShYQP5HUS3ZsDKty0fFSVCLLNMdsNRTDYwerwg"
